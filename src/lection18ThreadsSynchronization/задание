Многопоточность. Синхронизация

Задание: Создать многопоточное приложение, корректно работающее с разделяемыми ресурсами и избегающие ситуации взаимной блокировки.
Любая сущность, желающая получить доступ к разделяемому ресурсу, должна быть потоком

Система магазин
Магазин имеет перечень товаров (класс Good со свойствами: id, name, price, discount (0-0.89))
{Пиво, Водка, чипсы, хлеб, молоко, селедка, кефир, батон, гречка, колбаски, йогурт и булочка из печки}.
Поток "Покупатель" логирует свои действия в магазине (Например: Покупатель n зашел в магазин.
Покупатель n выбрал товар M в количестве 2 и т.д.).
Покупатель может положить в корзину от 0 до к товаром разным количеством (для каждого потока покупателя определяется случайным образом).
Если покупатель ничего не выбрал, то он логирует это и покидает магазин.
Если корзина (ShoppingBasket) не пуста, то покупатель становится в единую очередь, которую обслуживают несколько касс от 1-3.
Первая, освободившаяся касса, обслуживает первого из очереди покупателя.
Время обслуживания пропорционально равно количеству покупок в корзине покупателя.
Касса логирует все действия с товарами покупателя и формирует сумму покупки.
Поток покупатель выдает случайным образом сумму больше или равную запрашиваемой.
После этого Касса выдает чек, формирует объект Receipt (id, date, casseNo, List<Item>, totalSum, change).
Где Item, класс идентифицирующий товарную позицию в чеке (Item: No -порядковый номер позиции, Good, quantity, cost, discount, discountAmount).
Печатается текст чека Покупатель выходит из магазина и сообщает об этом.